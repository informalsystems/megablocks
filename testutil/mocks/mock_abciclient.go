// Code generated by MockGen. DO NOT EDIT.
// Source: cosmos/cometbft/abci/client/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	abcicli "github.com/cometbft/cometbft/abci/client"
	types "github.com/cometbft/cometbft/abci/types"
	log "github.com/cometbft/cometbft/libs/log"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ApplySnapshotChunk mocks base method.
func (m *MockClient) ApplySnapshotChunk(arg0 context.Context, arg1 *types.RequestApplySnapshotChunk) (*types.ResponseApplySnapshotChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplySnapshotChunk", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseApplySnapshotChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplySnapshotChunk indicates an expected call of ApplySnapshotChunk.
func (mr *MockClientMockRecorder) ApplySnapshotChunk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplySnapshotChunk", reflect.TypeOf((*MockClient)(nil).ApplySnapshotChunk), arg0, arg1)
}

// CheckTx mocks base method.
func (m *MockClient) CheckTx(arg0 context.Context, arg1 *types.RequestCheckTx) (*types.ResponseCheckTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTx", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseCheckTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTx indicates an expected call of CheckTx.
func (mr *MockClientMockRecorder) CheckTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTx", reflect.TypeOf((*MockClient)(nil).CheckTx), arg0, arg1)
}

// CheckTxAsync mocks base method.
func (m *MockClient) CheckTxAsync(arg0 context.Context, arg1 *types.RequestCheckTx) (*abcicli.ReqRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTxAsync", arg0, arg1)
	ret0, _ := ret[0].(*abcicli.ReqRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckTxAsync indicates an expected call of CheckTxAsync.
func (mr *MockClientMockRecorder) CheckTxAsync(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTxAsync", reflect.TypeOf((*MockClient)(nil).CheckTxAsync), arg0, arg1)
}

// Commit mocks base method.
func (m *MockClient) Commit(arg0 context.Context, arg1 *types.RequestCommit) (*types.ResponseCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Commit indicates an expected call of Commit.
func (mr *MockClientMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockClient)(nil).Commit), arg0, arg1)
}

// Echo mocks base method.
func (m *MockClient) Echo(arg0 context.Context, arg1 string) (*types.ResponseEcho, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Echo", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseEcho)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Echo indicates an expected call of Echo.
func (mr *MockClientMockRecorder) Echo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Echo", reflect.TypeOf((*MockClient)(nil).Echo), arg0, arg1)
}

// Error mocks base method.
func (m *MockClient) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockClientMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockClient)(nil).Error))
}

// ExtendVote mocks base method.
func (m *MockClient) ExtendVote(arg0 context.Context, arg1 *types.RequestExtendVote) (*types.ResponseExtendVote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendVote", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseExtendVote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtendVote indicates an expected call of ExtendVote.
func (mr *MockClientMockRecorder) ExtendVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendVote", reflect.TypeOf((*MockClient)(nil).ExtendVote), arg0, arg1)
}

// FinalizeBlock mocks base method.
func (m *MockClient) FinalizeBlock(arg0 context.Context, arg1 *types.RequestFinalizeBlock) (*types.ResponseFinalizeBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeBlock", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseFinalizeBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeBlock indicates an expected call of FinalizeBlock.
func (mr *MockClientMockRecorder) FinalizeBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeBlock", reflect.TypeOf((*MockClient)(nil).FinalizeBlock), arg0, arg1)
}

// Flush mocks base method.
func (m *MockClient) Flush(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockClientMockRecorder) Flush(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockClient)(nil).Flush), arg0)
}

// Info mocks base method.
func (m *MockClient) Info(arg0 context.Context, arg1 *types.RequestInfo) (*types.ResponseInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockClientMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockClient)(nil).Info), arg0, arg1)
}

// InitChain mocks base method.
func (m *MockClient) InitChain(arg0 context.Context, arg1 *types.RequestInitChain) (*types.ResponseInitChain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitChain", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseInitChain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitChain indicates an expected call of InitChain.
func (mr *MockClientMockRecorder) InitChain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitChain", reflect.TypeOf((*MockClient)(nil).InitChain), arg0, arg1)
}

// IsRunning mocks base method.
func (m *MockClient) IsRunning() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockClientMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockClient)(nil).IsRunning))
}

// ListSnapshots mocks base method.
func (m *MockClient) ListSnapshots(arg0 context.Context, arg1 *types.RequestListSnapshots) (*types.ResponseListSnapshots, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseListSnapshots)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockClientMockRecorder) ListSnapshots(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockClient)(nil).ListSnapshots), arg0, arg1)
}

// LoadSnapshotChunk mocks base method.
func (m *MockClient) LoadSnapshotChunk(arg0 context.Context, arg1 *types.RequestLoadSnapshotChunk) (*types.ResponseLoadSnapshotChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadSnapshotChunk", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseLoadSnapshotChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadSnapshotChunk indicates an expected call of LoadSnapshotChunk.
func (mr *MockClientMockRecorder) LoadSnapshotChunk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadSnapshotChunk", reflect.TypeOf((*MockClient)(nil).LoadSnapshotChunk), arg0, arg1)
}

// OfferSnapshot mocks base method.
func (m *MockClient) OfferSnapshot(arg0 context.Context, arg1 *types.RequestOfferSnapshot) (*types.ResponseOfferSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferSnapshot", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseOfferSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferSnapshot indicates an expected call of OfferSnapshot.
func (mr *MockClientMockRecorder) OfferSnapshot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferSnapshot", reflect.TypeOf((*MockClient)(nil).OfferSnapshot), arg0, arg1)
}

// OnReset mocks base method.
func (m *MockClient) OnReset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnReset")
	ret0, _ := ret[0].(error)
	return ret0
}

// OnReset indicates an expected call of OnReset.
func (mr *MockClientMockRecorder) OnReset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReset", reflect.TypeOf((*MockClient)(nil).OnReset))
}

// OnStart mocks base method.
func (m *MockClient) OnStart() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnStart")
	ret0, _ := ret[0].(error)
	return ret0
}

// OnStart indicates an expected call of OnStart.
func (mr *MockClientMockRecorder) OnStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStart", reflect.TypeOf((*MockClient)(nil).OnStart))
}

// OnStop mocks base method.
func (m *MockClient) OnStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnStop")
}

// OnStop indicates an expected call of OnStop.
func (mr *MockClientMockRecorder) OnStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStop", reflect.TypeOf((*MockClient)(nil).OnStop))
}

// PrepareProposal mocks base method.
func (m *MockClient) PrepareProposal(arg0 context.Context, arg1 *types.RequestPrepareProposal) (*types.ResponsePrepareProposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareProposal", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponsePrepareProposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareProposal indicates an expected call of PrepareProposal.
func (mr *MockClientMockRecorder) PrepareProposal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareProposal", reflect.TypeOf((*MockClient)(nil).PrepareProposal), arg0, arg1)
}

// ProcessProposal mocks base method.
func (m *MockClient) ProcessProposal(arg0 context.Context, arg1 *types.RequestProcessProposal) (*types.ResponseProcessProposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessProposal", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseProcessProposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessProposal indicates an expected call of ProcessProposal.
func (mr *MockClientMockRecorder) ProcessProposal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessProposal", reflect.TypeOf((*MockClient)(nil).ProcessProposal), arg0, arg1)
}

// Query mocks base method.
func (m *MockClient) Query(arg0 context.Context, arg1 *types.RequestQuery) (*types.ResponseQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockClientMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockClient)(nil).Query), arg0, arg1)
}

// Quit mocks base method.
func (m *MockClient) Quit() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quit")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Quit indicates an expected call of Quit.
func (mr *MockClientMockRecorder) Quit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quit", reflect.TypeOf((*MockClient)(nil).Quit))
}

// Reset mocks base method.
func (m *MockClient) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockClientMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockClient)(nil).Reset))
}

// SetLogger mocks base method.
func (m *MockClient) SetLogger(arg0 log.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", arg0)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockClientMockRecorder) SetLogger(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockClient)(nil).SetLogger), arg0)
}

// SetResponseCallback mocks base method.
func (m *MockClient) SetResponseCallback(arg0 abcicli.Callback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetResponseCallback", arg0)
}

// SetResponseCallback indicates an expected call of SetResponseCallback.
func (mr *MockClientMockRecorder) SetResponseCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResponseCallback", reflect.TypeOf((*MockClient)(nil).SetResponseCallback), arg0)
}

// Start mocks base method.
func (m *MockClient) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockClientMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockClient)(nil).Start))
}

// Stop mocks base method.
func (m *MockClient) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockClientMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockClient)(nil).Stop))
}

// String mocks base method.
func (m *MockClient) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockClientMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockClient)(nil).String))
}

// VerifyVoteExtension mocks base method.
func (m *MockClient) VerifyVoteExtension(arg0 context.Context, arg1 *types.RequestVerifyVoteExtension) (*types.ResponseVerifyVoteExtension, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyVoteExtension", arg0, arg1)
	ret0, _ := ret[0].(*types.ResponseVerifyVoteExtension)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyVoteExtension indicates an expected call of VerifyVoteExtension.
func (mr *MockClientMockRecorder) VerifyVoteExtension(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyVoteExtension", reflect.TypeOf((*MockClient)(nil).VerifyVoteExtension), arg0, arg1)
}
